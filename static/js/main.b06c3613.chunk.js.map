{"version":3,"sources":["App.js","serviceWorker.js","index.js","map.png"],"names":["MAP","name","areas","shape","coords","preFillColor","lineWidth","URL","map","App","props","state","hoveredArea","msg","moveMsg","this","setState","area","JSON","stringify","evt","x","nativeEvent","layerX","y","layerY","top","center","left","className","style","position","src","width","onLoad","load","onClick","clicked","onMouseEnter","enterArea","onMouseLeave","leaveArea","onMouseMove","_","moveOnArea","onImageClick","clickedOutside","onImageMouseMove","moveOnImage","strokeColor","getTipPosition","codeDetails","stylindDetails","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.b06c3613.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport ImageMapper from 'react-image-mapper';\nimport map from './map.png';\nimport './App.css';\n\nvar WIDTH = 800;\n\nvar MAP = {\n\tname: \"my-map\",\n\tareas: [\n\t\t// {\n\t\t// \tname: \"1\",\n\t\t// \tshape: \"poly\",\n\t\t// \tcoords: [25, 33, 27, 300, 128, 240, 128, 94],\n\t\t// \tpreFillColor: \"green\",\n\t\t// \tfillColor: \"#0000ff\"\n\t\t// },\n\t\t// {\n\t\t// \tname: \"2\",\n\t\t// \tshape: \"poly\",\n\t\t// \tcoords: [219, 118, 220, 210, 283, 210, 284, 119],\n\t\t// \tpreFillColor: \"pink\",\n\t\t// \tlineWidth: 10,\n\t\t// \tstrokeColor: \"#0000ff\"\n\t\t// },\n\t\t// {\n\t\t// \tname: \"3\",\n\t\t// \tshape: \"poly\",\n\t\t// \tcoords: [381, 241, 383, 94, 462, 53, 457, 282],\n\t\t// \tpreFillColor: \"yellow\", // this is mandatory for stroke color to work\n\t\t// \tlineWidth: 10,\n\t\t// \tstrokeColor: \"#6afd09\"\n\t\t// },\n\t\t// {\n\t\t// \tname: \"4\",\n\t\t// \tshape: \"poly\",\n\t\t// \tcoords: [245, 285, 290, 285, 274, 239, 249, 238],\n\t\t// \tpreFillColor: \"red\"\n\t\t// },\n\t\t{\n\t\t\tname: \"Hogan\",\n\t\t\tshape: \"rect\",\n\t\t\tcoords: [312, 606, 350, 636],\n\t\t\tpreFillColor: \"rgb(255,255,255,0.3)\",\n\t\t\tlineWidth: 1\n\t\t},\n\t\t{\n\t\t\tname: \"SIPA\",\n\t\t\tshape: \"rect\",\n\t\t\tcoords: [365*WIDTH/500, 178*WIDTH/500, 406*WIDTH/500, 192*WIDTH/500],\n\t\t\tpreFillColor: \"rgb(255,255,255,0.3)\",\n\t\t\tlineWidth: 1\n\t\t},\n\t\t{\n\t\t\tname: \"Pupin\",\n\t\t\tshape: \"rect\",\n\t\t\tcoords: [215*WIDTH/500, 84*WIDTH/500, 250*WIDTH/500, 96*WIDTH/500],\n\t\t\tpreFillColor: \"rgb(255,255,255,0.3)\",\n\t\t\tlineWidth: 1\n\t\t},\n\t\t{\n\t\t\tname: \"Kent\",\n\t\t\tshape: \"rect\",\n\t\t\tcoords: [302*WIDTH/500, 250*WIDTH/500, 342*WIDTH/500, 261*WIDTH/500],\n\t\t\tpreFillColor: \"rgb(255,255,255,0.3)\",\n\t\t\tlineWidth: 1\n\t\t},\n\t\t{\n\t\t\tname: \"Low Library\",\n\t\t\tshape: \"rect\",\n\t\t\tcoords: [252*WIDTH/500, 187*WIDTH/500, 289*WIDTH/500, 225*WIDTH/500],\n\t\t\tlineWidth: 1,\n\t\t\tpreFillColor: \"rgba(255, 255, 255, 0.3)\",\n\t\t\t// strokeColor: \"#6afd09\"\n\t\t}\n\t]\n};\n\nvar URL = map;\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      hoveredArea: null, msg: null, moveMsg: null\n    }\n  }\n\tload() {\n\t\tthis.setState({ msg: \"Interact with image !\" });\n\t}\n\tclicked(area) {\n\t\tthis.setState({\n\t\t\tmsg: `You clicked on ${area.shape} at coords ${JSON.stringify(\n\t\t\t\tarea.coords\n\t\t\t)} !`\n\t\t});\n\t}\n\tclickedOutside(evt) {\n\t\tconst coords = { x: evt.nativeEvent.layerX, y: evt.nativeEvent.layerY };\n\t\tthis.setState({\n\t\t\tmsg: `You clicked on the image at coords ${JSON.stringify(coords)} !`\n\t\t});\n\t}\n\tmoveOnImage(evt) {\n\t\tconst coords = { x: evt.nativeEvent.layerX, y: evt.nativeEvent.layerY };\n\t\tthis.setState({\n\t\t\tmoveMsg: `You moved on the image at coords ${JSON.stringify(coords)} !`\n\t\t});\n\t}\n\tenterArea(area) {\n\t\tthis.setState({\n\t\t\thoveredArea: area,\n\t\t\tmsg: `You entered ${area.shape} ${area.name} at coords ${JSON.stringify(\n\t\t\t\tarea.coords\n\t\t\t)} !`\n\t\t});\n\t}\n\tleaveArea(area) {\n\t\tthis.setState({\n\t\t\thoveredArea: null,\n\t\t\tmsg: `You leaved ${area.shape} ${area.name} at coords ${JSON.stringify(\n\t\t\t\tarea.coords\n\t\t\t)} !`\n\t\t});\n\t}\n\tmoveOnArea(area, evt) {\n\t\tconst coords = { x: evt.nativeEvent.layerX, y: evt.nativeEvent.layerY };\n\t\tthis.setState({\n\t\t\tmoveMsg: `You moved on ${area.shape} ${\n\t\t\t\tarea.name\n\t\t\t} at coords ${JSON.stringify(coords)} !`\n\t\t});\n\t}\n\n\tgetTipPosition(area) {\n\t\treturn { top: `${area.center[1]}px`, left: `${area.center[0]}px` };\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"grid\">\n\t\t\t\t<div className=\"presenter\">\n\t\t\t\t\t<div style={{ position: \"relative\" }}>\n\t\t\t\t\t\t<ImageMapper\n\t\t\t\t\t\t\tsrc={URL}\n\t\t\t\t\t\t\tmap={MAP}\n\t\t\t\t\t\t\twidth={WIDTH}\n\t\t\t\t\t\t\tonLoad={() => this.load()}\n\t\t\t\t\t\t\tonClick={area => this.clicked(area)}\n\t\t\t\t\t\t\tonMouseEnter={area => this.enterArea(area)}\n\t\t\t\t\t\t\tonMouseLeave={area => this.leaveArea(area)}\n\t\t\t\t\t\t\tonMouseMove={(area, _, evt) => this.moveOnArea(area, evt)}\n\t\t\t\t\t\t\tonImageClick={evt => this.clickedOutside(evt)}\n\t\t\t\t\t\t\tonImageMouseMove={evt => this.moveOnImage(evt)}\n\t\t\t\t\t\t\tlineWidth={4}\n\t\t\t\t\t\t\tstrokeColor={\"white\"}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{this.state.hoveredArea && (\n\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\tclassName=\"tooltip\"\n\t\t\t\t\t\t\t\tstyle={{ ...this.getTipPosition(this.state.hoveredArea) }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{this.state.hoveredArea && this.state.hoveredArea.name}\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t\t<pre className=\"message\">\n\t\t\t\t\t\t{this.state.msg ? this.state.msg : null}\n\t\t\t\t\t</pre>\n\t\t\t\t\t<pre>{this.state.moveMsg ? this.state.moveMsg : null}</pre>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"source\">\n\t\t\t\t\t<h2>Accessibility Information :</h2>\n\t\t\t\t\tBuilding Name : &nbsp;\n\t\t\t\t\t<span\n\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\tthis.setState({ codeDetails: !this.state.codeDetails })\n\t\t\t\t\t\t}\n\t\t\t\t\t>\n\t\t\t\t\t\t{this.state.codeDetails ? \"[-]\" : \"[+]\"}\n          </span>\n          <br/>\n\t\t\t\t\tDetails : &nbsp;\n\t\t\t\t\t<span\n\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\tthis.setState({ stylindDetails: !this.state.stylindDetails })\n\t\t\t\t\t\t}\n\t\t\t\t\t>\n\t\t\t\t\t\t{this.state.stylindDetails ? \"[-]\" : \"[+]\"}\n\t\t\t\t\t</span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/map.73f03c53.png\";"],"sourceRoot":""}